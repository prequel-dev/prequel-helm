
{{ if .Values.probes.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels: 
    {{- include "probes.labels" . | nindent 4 }}
  name: {{ include "probes.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  selector: 
    matchLabels:
      {{- include "probes.selectorLabels" . | nindent 6 }}
  template: 
    metadata:
      labels:
        {{- include "probes.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "machineid"
          command:
          - '/app/prequel-machineid'
          - '/data/machineid.txt'
          image: "{{ .Values.repository }}/{{ .Values.machineid.image.repoName }}:{{ .Values.machineid.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.collector.image.pullPolicy }}
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          volumeMounts:
          - name: shared-data
            mountPath: /data
      containers:
      - args: ["/app/prequel-probes"]
        image: "{{ .Values.repository }}/{{ .Values.probes.image.repoName }}:{{ .Values.probes.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.probes.image.pullPolicy }}
        name: {{ .Values.probes.fullnameOverride }}
        resources: {}
        securityContext:
          {{- toYaml .Values.probes.securityContext | nindent 10 }}
        volumeMounts:
        - name: host-root
          mountPath: /host
          readOnly: true
        - mountPath: /etc/nats-certs/nats
          name: nats-tls
          readOnly: true
        - mountPath: /etc/nats-ca-cert
          name: tls-ca
          readOnly: true
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: logmeta
          mountPath: /etc/prequel/logmeta
        - name: spool
          mountPath: /etc/prequel/spool
        - name: shared-data
          mountPath: /data
        ports:
          - name: health
            containerPort: 8081
        startupProbe:
          httpGet:
            path: /startupz
            port: health
          periodSeconds: 2
          failureThreshold: 60
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /livez
            port: health
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 1
          failureThreshold: 3
      hostPID: true
      {{- with .Values.probes.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }} 
      {{- with .Values.probes.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.probes.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "probes.serviceAccountName" . }}
      volumes:
      - name: host-root
        hostPath:
            path: /
            type: Directory
      - name: sys
        hostPath:
            path: /sys
            type: Directory
      - name: nats-tls
        secret:
          secretName: nats-tls
      - name: tls-ca
        secret:
          secretName: nats-ca
      - name: shared-data
        emptyDir: {}
      - name: logmeta
        emptyDir: {}
      - name: spool
        emptyDir: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    {{- include "probes.labels" . | nindent 4 }}
  name: {{ include "probes.fullname" . }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    {{- include "probes.labels" . | nindent 4 }}
  name: {{ include "probes.fullname" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "probes.fullname" . }}
subjects:
- kind: ServiceAccount
  name: {{ include "probes.serviceAccountName" . }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    {{- include "probes.labels" . | nindent 4 }}
  name: {{ include "probes.fullname" . }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
{{- if .Values.scc }}
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: prequel-scc
  labels:
    app.kubernetes.io/managed-by: Helm
priority: 100
allowPrivilegedContainer: true
allowHostPID: true
allowHostNetwork: true
allowHostDirVolumePlugin: true
allowPrivilegeEscalation: true
allowedCapabilities: ["SYS_ADMIN","SYS_PTRACE"]
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
seccompProfiles: ["runtime/default"]   # <-- add this (or "*")
volumes: ["*"]
users: []     # keep empty; binding is via RBAC
groups: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prequel-scc-use
rules:
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: ["prequel-scc"]
    verbs: ["use"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prequel-scc-use
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prequel-scc-use
subjects:
- kind: ServiceAccount
  name: prequel-probes
  namespace: prequel
- kind: ServiceAccount
  name: prequel-collector
  namespace: prequel
{{- end }}

{{- end }}
